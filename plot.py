# -*- coding: utf-8 -*-
"""plot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FYmJPhT26H1BIjIg_fib9rCHPit_S2K3
"""

import math
import matplotlib.pyplot as plt
import numpy as np
from math import pi

"""# sin(x),cos(x),tan(x)"""

def plot_sin(k,x_d,y_d):
  #plotting sine function with the given duration as k:
  n=k/pi
  x=np.arange(-n,n,0.0001)
  x=x*pi
  y=np.sin(x*pi)

  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='sin(x)')

  # marking the important lines in a sine function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0,0]
  y3=[-1,1]
  l2=plt.plot(x3,y3,'--',label='x=0')
  y4=[1]*len(x)
  l3=plt.plot(x,y4,'--',label='y=1')
  y5=[-1]*len(x)
  l4=plt.plot(x,y5,'--',label='y=-1')

  #marking the given dot in the sine function:

  x_d=x_d/pi
  plt.scatter(x_d,y_d,s=200,label='given dot')

  plt.title("y=sin(x)")
  plt.legend()

plot_sin(3,pi*0.5,1)

def plot_cos(k,x_d,y_d):
  #plotting y=cos(x) function with the given duration as k:
  n=k/pi
  x=np.arange(-n,n,0.0001)
  x=x*pi
  y=np.cos(x*pi)

  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='cos(x)')

  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0,0]
  y3=[-1,1]
  l2=plt.plot(x3,y3,'--',label='x=0')
  y4=[1]*len(x)
  l3=plt.plot(x,y4,'--',label='y=1')
  y5=[-1]*len(x)
  l4=plt.plot(x,y5,'--',label='y=-1')
  
  #marking the given dot in the  function:

  x_d=x_d/pi
  plt.scatter(x_d,y_d,s=200,label='given dot')
  plt.title("y=cos(x)")
  plt.legend()

plot_cos(3,pi*0.5,0)

def plot_tan(k,x_d,y_d):
  #plotting sine function with the given duration as k:
  
  n=k/pi

  x = np.linspace(-n * np.pi, n * np.pi, 1000)
  y=np.tan(x)


  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='tan(x)')
  plt.ylim(-5, 5)

  # marking the important lines in a sine function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the sine function:

  plt.scatter(x_d,y_d,s=30,label='given dot')
  plt.title("y=tan(x)")
  plt.legend()





plot_tan(3,pi/4,1)

"""# sinh(x),cosh(x),tanh(x)"""

def plot_sinh(x_d,y_d):
  #plotting y=sinh(x) function :
  x=np.arange(-1,1,0.0001)
  x=x*pi
  y=np.sinh(x*pi)

  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='sinh(x)')

  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the function:

  x_d=x_d/pi
  plt.scatter(x_d,y_d,s=30,label='given dot')

  plt.title("y=sinh(x)")
  plt.legend()





plot_sinh(2.3*pi,np.sinh(2.3*pi))

def plot_cosh(x_d,y_d):
  #plotting sine function :
  x=np.arange(-1,1,0.0001)
  x=x*pi
  y=np.cosh(x*pi)


  

  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='cosh(x)')

  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the function:

  x_d=x_d/pi
  plt.scatter(x_d,y_d,s=30,label='given dot')

  plt.title("y=cosh(x)")
  plt.legend()





plot_cosh(2.3*pi,np.cosh(2.3*pi))

def plot_tanh(x_d,y_d):
  #plotting tanh function :
  


  x = np.linspace(-1 * np.pi, 1 * np.pi, 1000)
  y=np.tanh(x)



  plt.plot(x,y,label='tanh(x)')
  plt.ylim(-5, 5)

  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the function:

  plt.scatter(x_d,y_d,s=30,label='given dot')

  plt.title("y=tanh(x)")
  plt.legend()





plot_tanh(pi/4,np.tanh(pi/4))

"""# arcsin(x),arccos(c) 
#arctan(x) and tanh(x) in a same plot 
"""

def plot_arctan_tanh(x_d,y_d):
  #plotting y=arctan(x) and y=tanh(x) function :
  


  x = np.linspace(-1 * np.pi, 1 * np.pi, 1000)
  y=np.tanh(x)


  plt.figure(figsize=(10,10))
  plt.plot(x,y,label='tanh(x)')


  
  
  x = np.linspace(-1 * np.pi, 1 * np.pi, 1000)
  y=np.arctan(x)



  plt.plot(x,y,label='arctan(x)')
  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the function:

  
  plt.scatter(x_d,y_d,s=30,label='given dot')


  plt.title("y=tanh(x) vs y=arctan(x)")
  plt.legend()




#the given dot is only in arctan dunction
plot_arctan_tanh(pi/2,np.arctan(pi/2))

#the given dot is on tanh function
plot_arctan_tanh(pi/2,np.tanh(pi/2))

def plot_arcsin(x_d,y_d):
  #plotting sine function with the given duration as n:
  plt.figure(figsize=(10,10))

  x=np.arange(-1,1,0.0001)
  x=x*pi

  y=np.arcsin(x)
  plt.plot(x,y,label='arcsin(x)')


  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the  function:

  plt.scatter(x_d,y_d,s=30,label='given dot')
  plt.title("y=arcsin(x)")
  plt.legend()






plot_arcsin(-pi/4,np.arcsin(-pi/4))

def plot_arccos(x_d,y_d):
  #plotting sine function with the given duration as n:
  plt.figure(figsize=(10,10))
  
  x=np.arange(-1,1,0.0001)
  x=x*pi

  y=np.arccos(x)
  plt.plot(x,y,label='arccos(x)')


  # marking the important lines in the function :
  y2=x*0
  l1=plt.plot(x,y2,'--',label='y=0')
  x3=[0]*len(y)
  y3=[-1,1]
  l2=plt.plot(x3,y,'--',label='x=0')

  #marking the given dot in the function:

  plt.scatter(x_d,y_d,s=30,label='given dot')
  plt.title("y=arccos(x)")
  plt.legend()






plot_arccos(pi/4,np.arccos(pi/4))